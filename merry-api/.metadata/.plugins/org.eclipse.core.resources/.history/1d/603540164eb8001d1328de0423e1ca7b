package jp.co.highjunk.merryapi;

import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Optional;

import org.modelmapper.AbstractConverter;
import org.modelmapper.Converter;
import org.modelmapper.ModelMapper;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import jp.co.highjunk.merryapi.common.enums.EmployeePosition;
import jp.co.highjunk.merryapi.common.enums.Sex;
import jp.co.highjunk.merryapi.common.enums.SystemRole;

/**
 * アプリケーション設定クラス
 *
 * @author nakamurayuuma
 *
 */
@Configuration
public class MerryApiApplicationConfig {

    /**
     * ModelMapper
     *
     * @return ModelMapper
     */
    @Bean
    ModelMapper modelMapper() {
        ModelMapper modelMapper = new ModelMapper();
        // EmployeePositionコンバーター追加
        Converter<Integer, EmployeePosition> intEmployeePositionConverter = new AbstractConverter<Integer, EmployeePosition>() {
            @Override
            protected EmployeePosition convert(Integer source) {
            	Optional<EmployeePosition> optEmployeePosition = Optional.ofNullable(EmployeePosition.getObject(source));
                return optEmployeePosition.isPresent() ? optEmployeePosition.get() : null;
            }
        };
        modelMapper.addConverter(intEmployeePositionConverter);
        Converter<String, EmployeePosition> strEmployeePositionConverter = new AbstractConverter<String, EmployeePosition>() {
            @Override
            protected EmployeePosition convert(String source) {
            	Optional<EmployeePosition> optEmployeePosition = Optional.ofNullable(EmployeePosition.getObject(Integer.valueOf(source)));
                return optEmployeePosition.isPresent() ? optEmployeePosition.get() : null;
            }
        };
        modelMapper.addConverter(strEmployeePositionConverter);
        // Sexコンバーター追加
        Converter<Integer, Sex> intSexConverter = new AbstractConverter<Integer, Sex>() {
            @Override
            protected Sex convert(Integer source) {
            	Optional<Sex> optSex = Optional.ofNullable(Sex.getObject(source));
                return optSex.isPresent() ? optSex.get() : null;
            }
        };
        modelMapper.addConverter(intSexConverter);
        Converter<String, Sex> strSexConverter = new AbstractConverter<String, Sex>() {
            @Override
            protected Sex convert(String source) {
            	Optional<Sex> optSex = Optional.ofNullable(Sex.getObject(Integer.valueOf(source)));
                return optSex.isPresent() ? optSex.get() : null;
            }
        };
        modelMapper.addConverter(strSexConverter);
        // SystemRoleコンバーター追加
        Converter<Integer, SystemRole> intSystemRoleConverter = new AbstractConverter<Integer, SystemRole>() {
            @Override
            protected SystemRole convert(Integer source) {
            	Optional<SystemRole> optSystemRole = Optional.ofNullable(SystemRole.getObject(source));
                return optSystemRole.isPresent() ? optSystemRole.get() : null;
            }
        };
        modelMapper.addConverter(intSystemRoleConverter);
        Converter<String, SystemRole> strSystemRoleConverter = new AbstractConverter<String, SystemRole>() {
            @Override
            protected SystemRole convert(String source) {
            	Optional<SystemRole> optSystemRole = Optional.ofNullable(SystemRole.getObject(Integer.valueOf(source)));
                return optSystemRole.isPresent() ? optSystemRole.get() : null;
            }
        };
        modelMapper.addConverter(strSystemRoleConverter);
        // Date-LocaDateコンバーター追加
        Converter<Date, LocalDate> dateToLocalDateConverter = new AbstractConverter<Date, LocalDate>() {
            @Override
            protected LocalDate convert(Date source) {
            	Optional<Date> optDate = Optional.ofNullable(source);
            	LocalDate localDate = optDate.isPresent() ? LocalDate.ofInstant(optDate.get().toInstant(), ZoneId.systemDefault()) : null;
        		return localDate;
            }
        };
        modelMapper.addConverter(dateToLocalDateConverter);
        Converter<String, LocalDate> strDateToLocalDateConverter = new AbstractConverter<String, LocalDate>() {
            @Override
            protected LocalDate convert(String source) {
            	Optional<String> optDate = Optional.ofNullable(source);
            	LocalDate localDate = optDate.isPresent() ? LocalDate.parse(source, DateTimeFormatter.ofPattern("yyyy/MM/dd")) : null;
        		return localDate;
            }
        };
        modelMapper.addConverter(strDateToLocalDateConverter);

        return modelMapper;
    }
}